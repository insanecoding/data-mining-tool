buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
    }
    repositories {
        maven { url 'http://repo.spring.io/plugins-release'}
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath "com.moowork.gradle:gradle-node-plugin:1.0.1"
    }
}
// main plugins
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
// Provides additional optional and provided dependency configurations
// for Gradle along with Maven POM generation support.
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'
// frontend plugin
apply plugin: "com.moowork.node"

jar {
    baseName = 'data-mining-tool'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url 'http://repo.spring.io/plugins-release'}
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
}


dependencies {
    // web
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile('org.springframework.boot:spring-boot-starter-undertow')
    // db
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.zaxxer:HikariCP')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    runtime('com.h2database:h2')
    runtime('org.postgresql:postgresql')
    // misc
    compile('org.springframework.boot:spring-boot-starter-aop')
    optional('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.projectlombok:lombok')
    compile('com.google.guava:guava:20.0')
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.1'

    // test
    testCompile('org.springframework.boot:spring-boot-starter-test')
    //    logging
    compile ('ch.qos.logback:logback-core:1.1.7')
    compile ('ch.qos.logback:logback-classic:1.1.7')
    compile ('org.slf4j:jcl-over-slf4j:1.7.21')
    compile ('org.slf4j:slf4j-api:1.7.21')
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "tomcat-jdbc"
}

/**
 * make sure that node, npm, yarn and everything from package.json is installed
 */
task installFrontendDeps(type: YarnTask) {
    // 'yarn install' command
    args = ['install']
    execOverrides {
        it.workingDir = "${project.projectDir}/src/main/frontend"
    }
}

/**
 * transpile all JS into ES5, concatenate JS and CSS into production-ready files
 */
task buildProduction(type: YarnTask) {
    // 'yarn build' command
    args = ['build']
    execOverrides {
        it.workingDir = "${project.projectDir}/src/main/frontend"
    }
}

/**
 * make sure that the tasks will be executed exactly how the're in the list
 */
private void keepOrder(List<String> taskNames) {
    taskNames.inject(null) { acc, val ->
        if (acc != null) tasks[val].mustRunAfter acc
        tasks[val]
    }
}

/**
 *  delete previous versions of production frontend assets
 */
task deleteAssets(type: Delete) {
    delete "src/main/resources/static", "src/main/resources/asset-manifest.json",
            "src/main/resources/favicon.ico", "src/main/resources/index.html"
}

/**
 * copy newly built frontend assets
 */
task copyTask(type: Copy) {
    from 'src/main/frontend/build'
    into 'src/main/resources'
}

// first run
def allTasks = ['clean', 'installFrontendDeps', 'buildProduction', 'deleteAssets',
                'copyTask', 'bootRun']
task runMe(dependsOn: allTasks)
keepOrder(allTasks)

// only frontend assets
def reloadFrontend = ['buildProduction',  'deleteAssets',
                      'copyTask'];
task updateFrontend(dependsOn: reloadFrontend)
keepOrder(reloadFrontend)

node {
    // Version of node to use.
    version = '6.9.1'

    // Version of npm to use.
    npmVersion = '3.10.10'

    // Version of Yarn to use.
    yarnVersion = '0.17.10'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory for Yarn
    yarnWorkDir = file("${project.buildDir}/yarn")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

springBoot {
    mainClass = "com.me.DataMiningApplication"
}